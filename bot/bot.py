import asyncio
import os
import django
from aiogram import Bot, Dispatcher, types, F
from aiogram.client.session import aiohttp
from aiogram.filters import Command
from django.conf import settings
from asgiref.sync import sync_to_async
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardMarkup, KeyboardButton, BotCommand, \
    WebAppInfo
from rest_framework.reverse import reverse_lazy, reverse

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'myproject.settings')
django.setup()

from .models import Customer, Category, Product, Cart, CartItem  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–π—Ç–µ –∏–∑ –≤–∞—à–µ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è


class DjangoBot:
    def __init__(self):
        self.bot = Bot(token=settings.TELEGRAM_BOT_TOKEN)
        self.dp = Dispatcher()
        self.setup_handlers()


    def get_inline_menu(self):
        """Inline –º–µ–Ω—é –¥–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π"""
        return InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="üõí –ö–æ—Ä–∑–∏–Ω–∞", callback_data="cart")],
                [InlineKeyboardButton(text="üë§ –ü—Ä–æ—Ñ–∏–ª—å", callback_data="profile")],
                [InlineKeyboardButton(text="üì¶ –ú–æ–∏ –∑–∞–∫–∞–∑—ã", callback_data="orders")],
                [InlineKeyboardButton(text='üóíÔ∏è –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤', callback_data="categories")],
            ]
        )

    async def set_bot_commands(self):
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–º–∞–Ω–¥ –º–µ–Ω—é –±–æ—Ç–∞"""
        commands = [
            BotCommand(command="start", description="–ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞"),
        ]
        await self.bot.set_my_commands(commands)

    def setup_handlers(self):
        @self.dp.message(Command("start"))
        async def cmd_start(message: types.Message):
            """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –≤ –º–æ–¥–µ–ª—å Customer"""
            user = message.from_user

            # –ò—Å–ø–æ–ª—å–∑—É–µ–º sync_to_async –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Django ORM
            try:
                customer = await sync_to_async(Customer.objects.get)(telegram_id=str(user.id))
                welcome_text = f"""
üëã –° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º, {customer.first_name}!

‚úÖ –í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ –∫–∞–∫ –∑–∞–∫–∞–∑—á–∏–∫.
üìû –¢–µ–ª–µ—Ñ–æ–Ω: {customer.phone}
üè† –ê–¥—Ä–µ—Å: {customer.address}

–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é ‚Üì
                """

                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ inline –º–µ–Ω—é
                await message.answer("–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ–ø—Ü–∏–∏:", reply_markup=self.get_inline_menu())

            except Customer.DoesNotExist:
                # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–æ–≤—ã–π
                welcome_text = """
üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! 

–Ø –±–æ—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞–º–∏. –î–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –º–Ω–µ –Ω—É–∂–Ω–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è.

üìù –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:
+79991234567
                """
                await message.answer(welcome_text)

        @self.dp.message(Command("menu"))
        async def cmd_menu(message: types.Message):
            """–ü–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
            try:
                customer = await sync_to_async(Customer.objects.get)(telegram_id=str(message.from_user.id))
                menu_text = f"""
üì± –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é, {customer.first_name}!

–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:
                """
                await message.answer("–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ–ø—Ü–∏–∏:", reply_markup=self.get_inline_menu())

            except Customer.DoesNotExist:
                await message.answer("‚ùå –°–Ω–∞—á–∞–ª–∞ –∑–∞–≤–µ—Ä—à–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é —á–µ—Ä–µ–∑ /start")

        @self.dp.message(F.text.regexp(r'^\+?[0-9]{10,15}$'))
        async def process_phone(message: types.Message):
            """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞"""
            user = message.from_user
            phone = message.text.strip()

            try:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–Ω—è—Ç –ª–∏ —Ç–µ–ª–µ—Ñ–æ–Ω –¥—Ä—É–≥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
                phone_exists = await sync_to_async(
                    lambda: Customer.objects.filter(phone=phone).exclude(telegram_id=str(user.id)).exists()
                )()

                if phone_exists:
                    await message.answer("‚ùå –≠—Ç–æ—Ç –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —É–∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥—Ä—É–≥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.")
                    return

                # –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –ø–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                customer, created = await sync_to_async(
                    lambda: Customer.objects.get_or_create(
                        telegram_id=str(user.id),
                        defaults={
                            'first_name': user.first_name or '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ',
                            'last_name': user.last_name or '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ',
                            'phone': phone,
                            'address': '–ù–µ —É–∫–∞–∑–∞–Ω'
                        }
                    )
                )()

                if not created:
                    # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–ª–µ—Ñ–æ–Ω –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
                    customer.phone = phone
                    await sync_to_async(customer.save)()

                await message.answer(f"""
‚úÖ –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {phone}

–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –∞–¥—Ä–µ—Å:
(–≥–æ—Ä–æ–¥, —É–ª–∏—Ü–∞, –¥–æ–º, –∫–≤–∞—Ä—Ç–∏—Ä–∞)
                """)

            except Exception as e:
                await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")

        @self.dp.message(F.text.len() > 10)
        async def process_address(message: types.Message):
            """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–¥—Ä–µ—Å–∞"""
            user = message.from_user
            address = message.text.strip()

            try:
                customer = await sync_to_async(Customer.objects.get)(telegram_id=str(user.id))
                customer.address = address
                await sync_to_async(customer.save)()

                # –ü–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é
                success_text = f"""
üéâ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!

üìã –í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ:
üë§ –ò–º—è: {customer.first_name} {customer.last_name}
üìû –¢–µ–ª–µ—Ñ–æ–Ω: {customer.phone}
üè† –ê–¥—Ä–µ—Å: {customer.address}

–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞–≤–∞—Ç—å –∑–∞–∫–∞–∑—ã!
                """
                await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=self.get_inline_menu())

                # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã –º–µ–Ω—é
                await self.set_bot_commands()

            except Customer.DoesNotExist:
                await message.answer("‚ùå –°–Ω–∞—á–∞–ª–∞ –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞.")
            except Exception as e:
                await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∞–¥—Ä–µ—Å–∞.")

        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ inline –∫–Ω–æ–ø–æ–∫
        @self.dp.callback_query(F.data == "profile")
        async def cmd_profile(callback: types.CallbackQuery):
            """–ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –∑–∞–∫–∞–∑—á–∏–∫–∞"""
            try:
                customer = await sync_to_async(Customer.objects.get)(telegram_id=str(callback.from_user.id))

                profile_info = f"""
        üìã *–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å –∑–∞–∫–∞–∑—á–∏–∫–∞:*

        üë§ –ò–º—è: {customer.first_name} {customer.last_name}
        üìû –¢–µ–ª–µ—Ñ–æ–Ω: `{customer.phone}`
        üè† –ê–¥—Ä–µ—Å: {customer.address}
        üÜî Telegram ID: `{customer.telegram_id}`
                        """

                await callback.message.answer(profile_info, parse_mode="Markdown")

            except Customer.DoesNotExist:
                await callback.answer("‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start")

        @self.dp.callback_query(F.data == "categories")
        async def send_categories_list(callback: types.CallbackQuery):
            """–ü–æ–ª—É—á–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —á–µ—Ä–µ–∑ API –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–ø–∏—Å–∫–æ–º"""
            try:
                # –ü–æ–ª—É—á–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Å–ø–∏—Å–æ–∫
                categories = await sync_to_async(list)(Category.objects.all())

                if not categories:
                    await callback.message.answer("üì≠ –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                    await callback.answer()
                    return

                categories_buttons = []
                for category in categories:
                    categories_buttons.append([
                        InlineKeyboardButton(
                            text=category.title,
                            callback_data='category_' + str(category.id)
                        )
                    ])

                categories_menu = InlineKeyboardMarkup(inline_keyboard=categories_buttons)

                await callback.message.answer("üóÇÔ∏è –ö–∞—Ç–µ–≥–æ—Ä–∏–∏:", reply_markup=categories_menu)
                await callback.answer("‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã")

            except Exception as e:
                print(f"–û—à–∏–±–∫–∞: {e}")
                await callback.message.answer("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π")
                await callback.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")

        from asgiref.sync import sync_to_async

        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π
        @self.dp.callback_query(F.data.startswith("category_"))
        async def get_products_in_category(callback: types.CallbackQuery):
            print('get_products_in_category')
            try:
                category_id = callback.data.replace('category_', '')

                # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–≤–∞—Ä—ã –∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å sync_to_async
                products = await sync_to_async(list)(
                    Product.objects.filter(category_id=category_id).values('id', 'title')
                )

                if not products:
                    await callback.message.answer("–¢–æ–≤–∞—Ä—ã –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                    await callback.answer()
                    return

                products_buttons = []
                for product in products:
                    products_buttons.append([
                        InlineKeyboardButton(
                            text=product['title'],
                            callback_data='product_' + str(product['id'])
                        )
                    ])

                # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
                products_buttons.append([
                    InlineKeyboardButton(
                        text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º",
                        callback_data="categories"
                    )
                ])

                products_menu = InlineKeyboardMarkup(inline_keyboard=products_buttons)

                await callback.message.answer("üìö –¢–æ–≤–∞—Ä—ã:", reply_markup=products_menu)
                await callback.answer("‚úÖ –¢–æ–≤–∞—Ä—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã")

            except Exception as e:
                print(f"–û—à–∏–±–∫–∞: {e}")
                await callback.message.answer("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤")
                await callback.answer()

        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Ç–æ–≤–∞—Ä–æ–≤
        @self.dp.callback_query(F.data.startswith("product_"))
        async def get_product_info(callback: types.CallbackQuery):
            print('get_product_info')
            try:
                product_id = callback.data.replace('product_', '')

                # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–≤–∞—Ä —Å sync_to_async
                product = await sync_to_async(
                    Product.objects.get
                )(id=product_id)

                # –°–æ–∑–¥–∞–µ–º –º–µ–Ω—é —Å sync_to_async –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
                category_id = await sync_to_async(lambda: product.category.id)()

                product_menu = InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text='üõí –î–æ–±–∞–≤–∏—Ç—å –≤ –∫–æ—Ä–∑–∏–Ω—É', callback_data=f'to_cart_{product.id}')],
                    [InlineKeyboardButton(text='‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —Ç–æ–≤–∞—Ä–∞–º', callback_data=f'category_{category_id}')]
                ])

                # –§–æ—Ä–º–∏—Ä—É–µ–º caption
                caption = f"""
üì¶ *{product.title}*
üí∞ –¶–µ–Ω–∞: {product.price} ‚ÇΩ
üìù {product.description or '–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}
                """

                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ –µ—Å–ª–∏ –µ—Å—Ç—å
                if product.image:
                    try:
                        from aiogram.types import FSInputFile
                        photo = FSInputFile(product.image.path)
                        await callback.message.answer_photo(
                            photo=photo,
                            caption=caption,
                            parse_mode="Markdown",
                            reply_markup=product_menu
                        )
                    except Exception as e:
                        print(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
                        await callback.message.answer(
                            caption,
                            parse_mode="Markdown",
                            reply_markup=product_menu
                        )
                else:
                    await callback.message.answer(
                        caption,
                        parse_mode="Markdown",
                        reply_markup=product_menu
                    )

                await callback.answer()

            except Product.DoesNotExist:
                await callback.message.answer("‚ùå –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω")
                await callback.answer()
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞: {e}")
                await callback.message.answer("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–æ–≤–∞—Ä–µ")
                await callback.answer()

        #–¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –≤ –∫–æ—Ä–∑–∏–Ω—É
        @self.dp.callback_query(F.data.startswith('to_cart_'))
        async def add_to_cart(callback: types.CallbackQuery):
            try:
                customer = await sync_to_async(Customer.objects.get)(telegram_id=str(callback.from_user.id))
                cart, created = await sync_to_async(Cart.objects.get_or_create)(customer=customer)

                product_id = callback.data.replace('to_cart_', '')
                product = await sync_to_async(Product.objects.get)(id=product_id)

                # –ü–†–ê–í–ò–õ–¨–ù–û: –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –ø–æ–ª—É—á–∞–µ–º cart_item –∑–∞ –æ–¥–∏–Ω –∑–∞–ø—Ä–æ—Å
                cart_item_exists = await sync_to_async(
                    lambda: CartItem.objects.filter(cart=cart, product=product).exists()
                )()

                if cart_item_exists:
                    # –ï—Å–ª–∏ —Ç–æ–≤–∞—Ä —É–∂–µ –µ—Å—Ç—å, –æ–±–Ω–æ–≤–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
                    cart_item = await sync_to_async(
                        CartItem.objects.get
                    )(cart=cart, product=product)
                    cart_item.quantity += 1
                    await sync_to_async(cart_item.save)()
                    message = f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∞ –µ—â–µ 1 —à—Ç. —Ç–æ–≤–∞—Ä–∞ \"{product.title}\""
                else:
                    # –ï—Å–ª–∏ —Ç–æ–≤–∞—Ä–∞ –Ω–µ—Ç, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å
                    cart_item = await sync_to_async(
                        CartItem.objects.create
                    )(cart=cart, product=product, quantity=1)
                    message = f"‚úÖ –¢–æ–≤–∞—Ä \"{product.title}\" –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É"

                await callback.message.answer(message)
                await callback.answer()

            except Customer.DoesNotExist:
                await callback.message.answer('‚ùå –°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å —Å –ø–æ–º–æ—â—å—é /start')
                await callback.answer()
            except Product.DoesNotExist:
                await callback.message.answer('‚ùå –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω')
                await callback.answer()
            except Exception as e:
                print(f'–û—à–∏–±–∫–∞: {e}')
                await callback.message.answer('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞ –≤ –∫–æ—Ä–∑–∏–Ω—É')
                await callback.answer()

        @self.dp.callback_query(F.data == 'cart')
        async def get_cart(callback: types.CallbackQuery):
            print('get_cart')
            try:
                print('get customer')
                customer = await sync_to_async(Customer.objects.get)(telegram_id=str(callback.from_user.id))
                print('get cart')
                cart = await sync_to_async(Cart.objects.get)(customer=customer)
                print('get cart items')
                cart_items = await sync_to_async(CartItem.objects.filter)(cart=cart)

                print('create text')
                products_text = '–°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ –≤ –∫–æ—Ä–∑–∏–Ω–µ:\n\n'

                # –û–¥–∏–Ω –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å –¥–ª—è –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö
                cart_data = await sync_to_async(
                    lambda: list(cart.items.select_related('product').values(
                        'product__title', 'product__price', 'quantity'
                    ))
                )()

                for item in cart_data:
                    print('add item into text')
                    products_text += f"{item['product__title']} - {item['product__price']} ‚ÇΩ | {item['quantity']} —à—Ç.\n"

                print('total text')
                # –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –ø–æ–ª—É—á–∞–µ–º –æ–±—â–∏–µ –¥–∞–Ω–Ω—ã–µ
                total_items = await sync_to_async(lambda: cart.total_items)()
                total_price = await sync_to_async(lambda: cart.total_price)()

                products_text += f'–í—Å–µ–≥–æ —Ç–æ–≤–∞—Ä–æ–≤: {total_items}\n–ò—Ç–æ–≥–æ: {total_price} ‚ÇΩ'

                await callback.message.answer(products_text, parse_mode="Markdown")
                await callback.answer()

            except Cart.DoesNotExist:
                await callback.message.answer('–ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞')

            except Exception as e:
                print(f'–û—à–∏–±–∫–∞: {e}')
                await callback.message.answer('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –∫–æ—Ä–∑–∏–Ω—ã')
                await callback.answer()

# @self.dp.callback_query(F.data == "feedback")
# async def feedback_callback(callback: types.CallbackQuery):
#     await callback.message.answer("‚≠ê –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Å—Ç–∞–≤—å—Ç–µ –≤–∞—à –æ—Ç–∑—ã–≤ –∑–¥–µ—Å—å: https://forms.gle/example")
#     await callback.answer()
#
# @self.dp.callback_query(F.data == "news")
# async def news_callback(callback: types.CallbackQuery):
#     await callback.message.answer("üì¢ –ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –Ω–∞—à–∏ –Ω–æ–≤–æ—Å—Ç–∏: @lero_news")
#     await callback.answer()

    async def start_polling(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –≤ —Ä–µ–∂–∏–º–µ polling"""
        print("ü§ñ Telegram –±–æ—Ç –∑–∞–ø—É—â–µ–Ω —Å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π –º–æ–¥–µ–ª–∏ Customer!")
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã –º–µ–Ω—é –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
        await self.set_bot_commands()
        await self.dp.start_polling(self.bot)