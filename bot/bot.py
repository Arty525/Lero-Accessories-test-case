import asyncio
import os
import django
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from django.conf import settings
from asgiref.sync import sync_to_async

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'myproject.settings')
django.setup()

from .models import Customer  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–π—Ç–µ –∏–∑ –≤–∞—à–µ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è


class DjangoBot:
    def __init__(self):
        self.bot = Bot(token=settings.TELEGRAM_BOT_TOKEN)
        self.dp = Dispatcher()
        self.setup_handlers()

    def setup_handlers(self):
        @self.dp.message(Command("start"))
        async def cmd_start(message: types.Message):
            """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –≤ –º–æ–¥–µ–ª—å Customer"""
            user = message.from_user

            # –ò—Å–ø–æ–ª—å–∑—É–µ–º sync_to_async –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Django ORM
            try:
                customer = await sync_to_async(Customer.objects.get)(telegram_id=str(user.id))
                welcome_text = f"""
üëã –° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º, {customer.first_name}!

‚úÖ –í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ –∫–∞–∫ –∑–∞–∫–∞–∑—á–∏–∫.
üìû –¢–µ–ª–µ—Ñ–æ–Ω: {customer.phone}
üè† –ê–¥—Ä–µ—Å: {customer.address}

–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é ‚Üì
                """

            except Customer.DoesNotExist:
                # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–æ–≤—ã–π
                welcome_text = """
üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! 

–Ø –±–æ—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞–º–∏. –î–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –º–Ω–µ –Ω—É–∂–Ω–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è.

üìù –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:
+79991234567
                """

            await message.answer(welcome_text)

        @self.dp.message(F.text.regexp(r'^\+?[0-9]{10,15}$'))
        async def process_phone(message: types.Message):
            """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞"""
            user = message.from_user
            phone = message.text.strip()

            try:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–Ω—è—Ç –ª–∏ —Ç–µ–ª–µ—Ñ–æ–Ω –¥—Ä—É–≥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
                phone_exists = await sync_to_async(
                    lambda: Customer.objects.filter(phone=phone).exclude(telegram_id=str(user.id)).exists()
                )()

                if phone_exists:
                    await message.answer("‚ùå –≠—Ç–æ—Ç –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —É–∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥—Ä—É–≥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.")
                    return

                # –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –ø–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                customer, created = await sync_to_async(
                    lambda: Customer.objects.get_or_create(
                        telegram_id=str(user.id),
                        defaults={
                            'first_name': user.first_name or '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ',
                            'last_name': user.last_name or '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ',
                            'phone': phone,
                            'address': '–ù–µ —É–∫–∞–∑–∞–Ω'
                        }
                    )
                )()

                if not created:
                    # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–ª–µ—Ñ–æ–Ω –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
                    customer.phone = phone
                    await sync_to_async(customer.save)()

                await message.answer(f"""
‚úÖ –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {phone}

–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –∞–¥—Ä–µ—Å:
(–≥–æ—Ä–æ–¥, —É–ª–∏—Ü–∞, –¥–æ–º, –∫–≤–∞—Ä—Ç–∏—Ä–∞)
                """)

            except Exception as e:
                await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")

        @self.dp.message(F.text.len() > 10)
        async def process_address(message: types.Message):
            """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–¥—Ä–µ—Å–∞"""
            user = message.from_user
            address = message.text.strip()

            try:
                customer = await sync_to_async(Customer.objects.get)(telegram_id=str(user.id))
                customer.address = address
                await sync_to_async(customer.save)()

                await message.answer(f"""
üéâ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!

üìã –í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ:
üë§ –ò–º—è: {customer.first_name} {customer.last_name}
üìû –¢–µ–ª–µ—Ñ–æ–Ω: {customer.phone}
üè† –ê–¥—Ä–µ—Å: {customer.address}

–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞–≤–∞—Ç—å –∑–∞–∫–∞–∑—ã!
                """)

            except Customer.DoesNotExist:
                await message.answer("‚ùå –°–Ω–∞—á–∞–ª–∞ –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞.")
            except Exception as e:
                await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∞–¥—Ä–µ—Å–∞.")

        @self.dp.message(Command("profile"))
        async def cmd_profile(message: types.Message):
            """–ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –∑–∞–∫–∞–∑—á–∏–∫–∞"""
            try:
                customer = await sync_to_async(Customer.objects.get)(telegram_id=str(message.from_user.id))

                profile_info = f"""
üìã *–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å –∑–∞–∫–∞–∑—á–∏–∫–∞:*

üë§ –ò–º—è: {customer.first_name} {customer.last_name}
üìû –¢–µ–ª–µ—Ñ–æ–Ω: `{customer.phone}`
üè† –ê–¥—Ä–µ—Å: {customer.address}
üÜî Telegram ID: `{customer.telegram_id}`
                """

                await message.answer(profile_info, parse_mode="Markdown")

            except Customer.DoesNotExist:
                await message.answer("‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start")

    async def start_polling(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –≤ —Ä–µ–∂–∏–º–µ polling"""
        print("ü§ñ Telegram –±–æ—Ç –∑–∞–ø—É—â–µ–Ω —Å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π –º–æ–¥–µ–ª–∏ Customer!")
        await self.dp.start_polling(self.bot)