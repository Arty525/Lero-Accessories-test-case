import asyncio
import os
import django
from aiogram import Bot, Dispatcher, types, F
from aiogram.client.session import aiohttp
from aiogram.filters import Command
from aiogram.fsm import state
from aiogram.fsm.context import FSMContext
from django.conf import settings
from asgiref.sync import sync_to_async
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardMarkup, KeyboardButton, BotCommand, \
    WebAppInfo
from rest_framework.reverse import reverse_lazy, reverse
from .bot_utils import update_phone, update_address, get_profile, get_welcome_text, get_cart_data, add_item_in_cart, \
    remove_item, change_cart_item_quantity, new_order
from .models import Customer, Category, Product, Cart, CartItem, Order

os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'myproject.settings')
django.setup()

class DjangoBot:
    def __init__(self):
        self.bot = Bot(token=settings.TELEGRAM_BOT_TOKEN)
        self.dp = Dispatcher()
        self.setup_handlers()


    def get_inline_menu(self):
        """Inline –º–µ–Ω—é"""
        return InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="üõí –ö–æ—Ä–∑–∏–Ω–∞", callback_data="cart")],
                [InlineKeyboardButton(text="üë§ –ü—Ä–æ—Ñ–∏–ª—å", callback_data="profile")],
                [InlineKeyboardButton(text="üì¶ –ú–æ–∏ –∑–∞–∫–∞–∑—ã", callback_data="orders")],
                [InlineKeyboardButton(text='üóíÔ∏è –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤', callback_data="categories")],
            ]
        )

    async def set_bot_commands(self):
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–º–∞–Ω–¥ –º–µ–Ω—é –±–æ—Ç–∞"""
        commands = [
            BotCommand(command="start", description="–ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞"),
            BotCommand(command="menu", description="–ü–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"),
        ]
        await self.bot.set_my_commands(commands)

    def setup_handlers(self):
        @self.dp.message(Command("start"))
        async def cmd_start(message: types.Message):
            """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –≤ –º–æ–¥–µ–ª—å Customer"""
            user = message.from_user
            welcome_text = await get_welcome_text(user)

            if welcome_text.startswith('–° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º'):
                await message.answer(welcome_text, reply_markup=self.get_inline_menu())
            else:
                await message.answer(welcome_text)

        @self.dp.message(Command("menu"))
        async def cmd_menu(message: types.Message):
            """–ü–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
            menu_text = f"""
–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:
                """
            await message.answer(menu_text, reply_markup=self.get_inline_menu())

        @self.dp.message(F.text.regexp(r'^\+?[0-9]{10,15}$'))
        async def process_phone(message: types.Message):
            """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞"""
            user = message.from_user
            phone = message.text.strip()
            answer_text = await update_phone(user, phone)
            await message.answer(answer_text)

        @self.dp.message(F.text.len() > 10)
        async def process_address(message: types.Message):
            """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–¥—Ä–µ—Å–∞"""
            user = message.from_user
            address = message.text.strip()
            answer_text = await update_address(user, address)
            await message.answer(answer_text)
            if answer_text.startswith("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!"):
                await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=self.get_inline_menu())
                await self.set_bot_commands()

        @self.dp.callback_query(F.data == "profile")
        async def cmd_profile(callback: types.CallbackQuery):
            """–ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –∑–∞–∫–∞–∑—á–∏–∫–∞"""
            customer = await sync_to_async(Customer.objects.get)(telegram_id=str(callback.from_user.id))
            try:
                profile_info = await get_profile(customer)
                await callback.answer()
                await callback.message.answer(profile_info, parse_mode="Markdown")
            except Customer.DoesNotExist:
                await callback.answer()
                await callback.answer("‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start")

        @self.dp.callback_query(F.data == "categories")
        async def send_categories_list(callback: types.CallbackQuery):
            try:
                categories = await sync_to_async(list)(Category.objects.all())
                if not categories:
                    await callback.message.answer("üì≠ –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                    await callback.answer()
                    return

                categories_buttons = []
                for category in categories:
                    categories_buttons.append([
                        InlineKeyboardButton(
                            text=category.title,
                            callback_data='category_' + str(category.id)
                        )
                    ])

                categories_menu = InlineKeyboardMarkup(inline_keyboard=categories_buttons)
                await callback.answer()
                await callback.message.answer("üóÇÔ∏è –ö–∞—Ç–µ–≥–æ—Ä–∏–∏:", reply_markup=categories_menu)

            except Exception as e:
                print(f"–û—à–∏–±–∫–∞: {e}")
                await callback.answer()
                await callback.message.answer("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π")

        @self.dp.callback_query(F.data.startswith("category_"))
        async def get_products_in_category(callback: types.CallbackQuery):
            try:
                category_id = callback.data.replace('category_', '')
                products = await sync_to_async(list)(
                    Product.objects.filter(category_id=category_id).values('id', 'title')
                )
                if not products:
                    await callback.message.answer("–¢–æ–≤–∞—Ä—ã –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                    return

                products_buttons = []
                for product in products:
                    products_buttons.append([
                        InlineKeyboardButton(
                            text=product['title'],
                            callback_data='product_' + str(product['id'])
                        )
                    ])

                products_buttons.append([
                    InlineKeyboardButton(
                        text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º",
                        callback_data="categories"
                    )
                ])
                products_menu = InlineKeyboardMarkup(inline_keyboard=products_buttons)
                await callback.answer()
                await callback.message.answer("üìö –¢–æ–≤–∞—Ä—ã:", reply_markup=products_menu)

            except Exception as e:
                print(f"–û—à–∏–±–∫–∞: {e}")
                await callback.answer()
                await callback.message.answer("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤")

        @self.dp.callback_query(F.data.startswith("product_"))
        async def get_product_info(callback: types.CallbackQuery):
            try:
                product_id = callback.data.replace('product_', '')
                product = await sync_to_async(
                    Product.objects.get
                )(id=product_id)

                category_id = await sync_to_async(lambda: product.category.id)()

                product_menu = InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text='üõí –î–æ–±–∞–≤–∏—Ç—å –≤ –∫–æ—Ä–∑–∏–Ω—É', callback_data=f'to_cart_{product.id}')],
                    [InlineKeyboardButton(text='‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —Ç–æ–≤–∞—Ä–∞–º', callback_data=f'category_{category_id}')]
                ])

                caption = f"""
üì¶ *{product.title}*
üí∞ –¶–µ–Ω–∞: {product.price} ‚ÇΩ
üìù {product.description or '–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}
                """

                if product.image:
                    try:
                        from aiogram.types import FSInputFile
                        photo = FSInputFile(product.image.path)
                        await callback.answer()
                        await callback.message.answer_photo(
                            photo=photo,
                            caption=caption,
                            parse_mode="Markdown",
                            reply_markup=product_menu
                        )
                    except Exception as e:
                        print(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
                        await callback.message.answer(
                            caption,
                            parse_mode="Markdown",
                            reply_markup=product_menu
                        )
                else:
                    await callback.answer()
                    await callback.message.answer(
                        caption,
                        parse_mode="Markdown",
                        reply_markup=product_menu
                    )

            except Product.DoesNotExist:
                await callback.answer()
                await callback.message.answer("‚ùå –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω")
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞: {e}")
                await callback.answer()
                await callback.message.answer("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–æ–≤–∞—Ä–µ")

        @self.dp.callback_query(F.data.startswith('to_cart_'))
        async def add_to_cart(callback: types.CallbackQuery):
            try:
                customer = await sync_to_async(Customer.objects.get)(telegram_id=str(callback.from_user.id))
                cart, created = await sync_to_async(Cart.objects.get_or_create)(customer=customer)

                product_id = callback.data.replace('to_cart_', '')
                message = await add_item_in_cart(cart, product_id)
                await callback.answer()
                await callback.message.answer(message)

            except Customer.DoesNotExist:
                await callback.message.answer('‚ùå –°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å —Å –ø–æ–º–æ—â—å—é /start')
            except Product.DoesNotExist:
                await callback.message.answer('‚ùå –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω')
            except Exception as e:
                print(f'–û—à–∏–±–∫–∞: {e}')
                await callback.message.answer('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞ –≤ –∫–æ—Ä–∑–∏–Ω—É')

        @self.dp.callback_query(F.data == 'cart')
        async def get_cart(callback: types.CallbackQuery):
            try:
                customer = await sync_to_async(Customer.objects.get)(telegram_id=str(callback.from_user.id))
                cart_data, total_items, total_price = await get_cart_data(customer)
                await callback.message.answer('üõí –í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞:\n')
                for item in cart_data:
                    cart_item_menu = InlineKeyboardMarkup(inline_keyboard=[
                        [InlineKeyboardButton(text='‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ', callback_data=f'change_quantity_{item['product__id']}')],
                        [InlineKeyboardButton(text='üóëÔ∏è –£–±—Ä–∞—Ç—å –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã', callback_data=f'remove_from_cart_{item['product__id']}')]
                    ])
                    await callback.message.answer(f"{item['product__title']} - "
f"{item['product__price']} ‚ÇΩ | {item['quantity']} —à—Ç.\n", reply_markup=cart_item_menu, parse_mode="Markdown")
                total_text = f'–í—Å–µ–≥–æ —Ç–æ–≤–∞—Ä–æ–≤: {total_items}, –°—É–º–º–∞: {total_price}'

                cart_menu = InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text='üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É',
                                          callback_data=f'clear_cart')],
                    [InlineKeyboardButton(text='üì¶ –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑',
                                          callback_data=f'take_order')]
                ])

                await callback.answer()
                await callback.message.answer(total_text, parse_mode="Markdown")
                await callback.message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', parse_mode="Markdown", reply_markup=cart_menu)
            except Cart.DoesNotExist:
                await callback.answer()
                await callback.message.answer('–ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞')
            except Exception as e:
                print(f'–û—à–∏–±–∫–∞: {e}')
                await callback.answer()
                await callback.message.answer('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –∫–æ—Ä–∑–∏–Ω—ã')

        @self.dp.callback_query(F.data.startswith('remove_from_cart_'))
        async def remove_cart_item(callback: types.CallbackQuery):
            customer = await sync_to_async(Customer.objects.get)(telegram_id=str(callback.from_user.id))
            item_id = callback.data.replace('remove_from_cart_', '')
            text_message = await remove_item(customer, item_id)
            await callback.message.answer(text_message, parse_mode="Markdown")
            await get_cart(callback)
            await callback.answer()

        @self.dp.callback_query(F.data.startswith('change_quantity_'))
        async def change_quantity(callback: types.CallbackQuery):
            item_id = callback.data.replace('change_quantity_', '')
            await callback.message.answer('–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞', parse='Markdown')
            @self.dp.message(F.text.isdigit())
            async def set_new_quantity(message: types.Message):
                quantity = message.text
                customer = await sync_to_async(Customer.objects.get)(telegram_id=str(callback.from_user.id))
                message_text = await change_cart_item_quantity(customer, item_id, quantity)
                await message.answer(message_text, parse_mode="Markdown")
                await get_cart(callback)
            await callback.answer()

        @self.dp.callback_query(F.data.startswith('take_order'))
        async def take_order(callback: types.CallbackQuery):
            try:
                print('take_order started')

                # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –º–µ—Ç–æ–¥–∞–º–∏ –¥–æ—Å—Ç–∞–≤–∫–∏
                delivery_method_list = []
                for delivery_method in Order.DELIVERY_METHOD_CHOICES:
                    delivery_method_list.append([
                        InlineKeyboardButton(
                            text=delivery_method[1],
                            callback_data=f"delivery_{delivery_method[0]}"
                        )
                    ])

                delivery_method_menu = InlineKeyboardMarkup(inline_keyboard=delivery_method_list)

                # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                customer = await sync_to_async(Customer.objects.get)(
                    telegram_id=str(callback.from_user.id)
                )
                cart = await sync_to_async(Cart.objects.get)(customer=customer)

                await callback.answer()
                await callback.message.answer(
                    '–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –¥–æ—Å—Ç–∞–≤–∫–∏:',
                    reply_markup=delivery_method_menu,
                    parse_mode="Markdown"
                )

            except Cart.DoesNotExist as e:
                print(f'‚ö†Ô∏è –û—à–∏–±–∫–∞: {e}')
                await callback.answer()
                await callback.message.answer('‚ùå –ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞')
            except Customer.DoesNotExist as e:
                print(f'‚ö†Ô∏è –û—à–∏–±–∫–∞: {e}')
                await callback.answer()
                await callback.message.answer('‚ùå –°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å —Å –ø–æ–º–æ—â—å—é /start')
            except Exception as e:
                print(f'‚ö†Ô∏è –û—à–∏–±–∫–∞: {e}')
                await callback.answer()
                await callback.message.answer('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–∫–∞–∑–∞')

        # –û—Ç–¥–µ–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Å–ø–æ—Å–æ–±–∞ –¥–æ—Å—Ç–∞–≤–∫–∏
        @self.dp.callback_query(F.data.startswith('delivery_'))
        async def create_order(callback: types.CallbackQuery):
            try:
                print('create_order started')

                # –ò–∑–≤–ª–µ–∫–∞–µ–º –º–µ—Ç–æ–¥ –¥–æ—Å—Ç–∞–≤–∫–∏ –∏–∑ callback_data
                delivery_method = callback.data.replace('delivery_', '')
                print(f'Delivery method: {delivery_method}')

                # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                customer = await sync_to_async(Customer.objects.get)(
                    telegram_id=str(callback.from_user.id)
                )
                cart = await sync_to_async(Cart.objects.get)(customer=customer)

                # –°–æ–∑–¥–∞–µ–º –∑–∞–∫–∞–∑
                order_message = await new_order(customer, cart, delivery_method)

                await callback.answer()
                await callback.message.answer(order_message, parse_mode="Markdown")

            except Exception as e:
                print(f'‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤ create_order: {e}')
                await callback.answer()
                await callback.message.answer('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–∫–∞–∑–∞')

        @self.dp.callback_query(F.data.startswith('clear_cart'))
        async def clear_cart(callback: types.CallbackQuery):
            await callback.answer()
            await callback.message.answer('‚ö†Ô∏è–í—ã —É–≤–µ—Ä–µ–Ω—ã —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—á–∏—Å—Ç–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É?', parse_mode="Markdown")
            clear_cart_menu = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text='‚úÖ –î–∞',
                                      callback_data=f'yes')],
                [InlineKeyboardButton(text='‚ùå –ù–µ—Ç',
                                      callback_data=f'no')]
            ])
            @self.dp.callback_query(F.data == 'yes')
            async def delete_cart(callback: types.CallbackQuery):
                customer = await sync_to_async(Customer.objects.get)(telegram_id=str(callback.from_user.id))
                cart = await sync_to_async(Cart.objects.get_or_create)(customer=customer)
                cart.delete()
                await callback.answer()
                await callback.message.answer('‚úÖ –ö–æ—Ä–∑–∏–Ω–∞ –æ—á–∏—â–µ–Ω–∞', parse_mode="Markdown")


    async def start_polling(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –≤ —Ä–µ–∂–∏–º–µ polling"""
        print("ü§ñ Telegram –±–æ—Ç –∑–∞–ø—É—â–µ–Ω")
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã –º–µ–Ω—é –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
        await self.set_bot_commands()
        await self.dp.start_polling(self.bot)