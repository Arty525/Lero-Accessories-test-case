# bot_utils.py (–æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π)
import logging
from asgiref.sync import sync_to_async
from bot.models import Customer, Product, CartItem, Cart, OrderItem, Order
from bot.services import order_number_generator

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger = logging.getLogger(__name__)

async def get_welcome_text(user) -> str:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        logger.info(f"–ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id}")
        customer = await sync_to_async(Customer.objects.get)(telegram_id=str(user.id))
        welcome_text = f"""–° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º, {customer.first_name}!
‚úÖ –í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ –∫–∞–∫ –∑–∞–∫–∞–∑—á–∏–∫.
üìû –¢–µ–ª–µ—Ñ–æ–Ω: {customer.phone}
üè† –ê–¥—Ä–µ—Å: {customer.address}
–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é ‚Üì
"""
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.id} –Ω–∞–π–¥–µ–Ω –∫–∞–∫ –∑–∞–∫–∞–∑—á–∏–∫")
        return welcome_text

    except Customer.DoesNotExist:
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.id} - –Ω–æ–≤—ã–π, —Ç—Ä–µ–±—É–µ—Ç—Å—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è")
        welcome_text = """
üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! 
–Ø –±–æ—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞–º–∏. –î–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –º–Ω–µ –Ω—É–∂–Ω–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è.
üìù –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:
+79991234567
                    """
        return welcome_text

async def update_phone(user, phone) -> str:
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        logger.info(f"–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id}: {phone}")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–Ω—è—Ç –ª–∏ —Ç–µ–ª–µ—Ñ–æ–Ω –¥—Ä—É–≥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
        phone_exists = await sync_to_async(
            lambda: Customer.objects.filter(phone=phone).exclude(telegram_id=str(user.id)).exists()
        )()

        if phone_exists:
            logger.warning(f"–¢–µ–ª–µ—Ñ–æ–Ω {phone} —É–∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥—Ä—É–≥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
            return "‚ùå –≠—Ç–æ—Ç –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —É–∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥—Ä—É–≥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º."

        # –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –ø–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        customer, created = await sync_to_async(
            lambda: Customer.objects.get_or_create(
                telegram_id=str(user.id),
                defaults={
                    'first_name': user.first_name or '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ',
                    'last_name': user.last_name or '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ',
                    'phone': phone,
                    'address': '–ù–µ —É–∫–∞–∑–∞–Ω'
                }
            )
        )()

        if created:
            logger.info(f"–°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –∫–ª–∏–µ–Ω—Ç: {customer.first_name} {customer.last_name}")
        else:
            logger.info(f"–û–±–Ω–æ–≤–ª–µ–Ω —Ç–µ–ª–µ—Ñ–æ–Ω –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞: {customer.first_name}")

        return f"""
‚úÖ –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {phone}

–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –∞–¥—Ä–µ—Å:
(–≥–æ—Ä–æ–¥, —É–ª–∏—Ü–∞, –¥–æ–º, –∫–≤–∞—Ä—Ç–∏—Ä–∞)
        """

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id}: {e}")
        return "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."

async def update_address(user, address) -> str:
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∞–¥—Ä–µ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        logger.info(f"–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∞–¥—Ä–µ—Å–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id}: {address}")
        customer = await sync_to_async(Customer.objects.get)(telegram_id=str(user.id))
        customer.address = address
        await sync_to_async(customer.save)()

        logger.info(f"–ê–¥—Ä–µ—Å —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id}")
        success_text = f"""
–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!
üìã –í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ:
üë§ –ò–º—è: {customer.first_name} {customer.last_name}
üìû –¢–µ–ª–µ—Ñ–æ–Ω: {customer.phone}
üè† –ê–¥—Ä–µ—Å: {customer.address}
–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞–≤–∞—Ç—å –∑–∞–∫–∞–∑—ã!
                    """
        return success_text
    except Customer.DoesNotExist:
        logger.warning(f"–ü–æ–ø—ã—Ç–∫–∞ –æ–±–Ω–æ–≤–∏—Ç—å –∞–¥—Ä–µ—Å –¥–ª—è –Ω–µ–∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id}")
        return "‚ùå –°–Ω–∞—á–∞–ª–∞ –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞."
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∞–¥—Ä–µ—Å–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id}: {e}")
        return "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∞–¥—Ä–µ—Å–∞."

async def get_profile(customer):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—Ä–æ—Ñ–∏–ª–µ"""
    logger.info(f"–ó–∞–ø—Ä–æ—Å –ø—Ä–æ—Ñ–∏–ª—è –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞ {customer.id}")
    profile_info = f"""
üìã *–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å –∑–∞–∫–∞–∑—á–∏–∫–∞:*
üë§ –ò–º—è: {customer.first_name} {customer.last_name}
üìû –¢–µ–ª–µ—Ñ–æ–Ω: `{customer.phone}`
üè† –ê–¥—Ä–µ—Å: {customer.address}
üÜî Telegram ID: `{customer.telegram_id}`
"""
    return profile_info

async def add_item_in_cart(cart, product_id):
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –≤ –∫–æ—Ä–∑–∏–Ω—É"""
    try:
        logger.info(f"–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ {product_id} –≤ –∫–æ—Ä–∑–∏–Ω—É {cart.id}")
        product = await sync_to_async(Product.objects.get)(id=product_id)

        cart_item_exists = await sync_to_async(
            lambda: CartItem.objects.filter(cart=cart, product=product).exists()
        )()

        if cart_item_exists:
            cart_item = await sync_to_async(CartItem.objects.get)(cart=cart, product=product)
            cart_item.quantity += 1
            await sync_to_async(cart_item.save)()
            logger.info(f"–£–≤–µ–ª–∏—á–µ–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞ {product.title} –≤ –∫–æ—Ä–∑–∏–Ω–µ")
            message = f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∞ –µ—â–µ 1 —à—Ç. —Ç–æ–≤–∞—Ä–∞ \"{product.title}\""
        else:
            await sync_to_async(CartItem.objects.create)(cart=cart, product=product, quantity=1)
            logger.info(f"–î–æ–±–∞–≤–ª–µ–Ω –Ω–æ–≤—ã–π —Ç–æ–≤–∞—Ä {product.title} –≤ –∫–æ—Ä–∑–∏–Ω—É")
            message = f"‚úÖ –¢–æ–≤–∞—Ä \"{product.title}\" –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É"

        return message

    except Product.DoesNotExist:
        logger.error(f"–¢–æ–≤–∞—Ä {product_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return "‚ùå –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω"
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞ –≤ –∫–æ—Ä–∑–∏–Ω—É: {e}")
        return "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞ –≤ –∫–æ—Ä–∑–∏–Ω—É"

async def get_cart_data(customer):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∫–æ—Ä–∑–∏–Ω—ã"""
    try:
        logger.info(f"–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∫–æ—Ä–∑–∏–Ω—ã –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞ {customer.id}")
        cart = await sync_to_async(Cart.objects.get)(customer=customer)
        cart_data = await sync_to_async(
            lambda: list(cart.items.select_related('product').values(
                'product__id', 'product__title', 'product__price', 'quantity'
            ))
        )()
        total_items = await sync_to_async(lambda: cart.total_items)()
        total_price = await sync_to_async(lambda: cart.total_price)()

        logger.info(f"–ö–æ—Ä–∑–∏–Ω–∞ –∫–ª–∏–µ–Ω—Ç–∞ {customer.id}: {total_items} —Ç–æ–≤–∞—Ä–æ–≤ –Ω–∞ —Å—É–º–º—É {total_price}")
        return cart_data, total_items, total_price

    except Cart.DoesNotExist:
        logger.warning(f"–ö–æ—Ä–∑–∏–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞ {customer.id}")
        return [], 0, 0
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –∫–æ—Ä–∑–∏–Ω—ã: {e}")
        return [], 0, 0

async def remove_item(customer, product_id):
    """–£–¥–∞–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã"""
    error_message = '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞ –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã'
    try:
        logger.info(f"–£–¥–∞–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ {product_id} –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã –∫–ª–∏–µ–Ω—Ç–∞ {customer.id}")
        cart = await sync_to_async(Cart.objects.get)(customer=customer)
        product = await sync_to_async(Product.objects.get)(id=product_id)
        cart_item = await sync_to_async(CartItem.objects.get)(cart=cart, product=product)
        await sync_to_async(cart_item.delete)()

        logger.info(f"–¢–æ–≤–∞—Ä {product_id} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã")
        return '‚úÖ –¢–æ–≤–∞—Ä —É–¥–∞–ª–µ–Ω –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã'

    except Customer.DoesNotExist:
        logger.error(f"–ö–ª–∏–µ–Ω—Ç {customer.id} –Ω–µ –Ω–∞–π–¥–µ–Ω –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞")
        return error_message
    except Cart.DoesNotExist:
        logger.error(f"–ö–æ—Ä–∑–∏–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞ {customer.id}")
        return error_message
    except Product.DoesNotExist:
        logger.error(f"–¢–æ–≤–∞—Ä {product_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏")
        return error_message
    except CartItem.DoesNotExist:
        logger.error(f"–≠–ª–µ–º–µ–Ω—Ç –∫–æ—Ä–∑–∏–Ω—ã –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è —Ç–æ–≤–∞—Ä–∞ {product_id}")
        return error_message
    except Exception as e:
        logger.error(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞: {e}')
        return error_message

async def change_cart_item_quantity(customer, product_id, quantity):
    """–ò–∑–º–µ–Ω–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç–æ–≤–∞—Ä–∞ –≤ –∫–æ—Ä–∑–∏–Ω–µ"""
    error_message = '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç–æ–≤–∞—Ä–∞ –≤ –∫–æ—Ä–∑–∏–Ω–µ'
    try:
        logger.info(f"–ò–∑–º–µ–Ω–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç–æ–≤–∞—Ä–∞ {product_id} –Ω–∞ {quantity} –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞ {customer.id}")
        cart = await sync_to_async(Cart.objects.get)(customer=customer)
        product = await sync_to_async(Product.objects.get)(id=product_id)
        cart_item = await sync_to_async(CartItem.objects.get)(cart=cart, product=product)
        cart_item.quantity = quantity
        await sync_to_async(cart_item.save)()

        logger.info(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞ {product_id} –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ {quantity}")
        return '‚úÖ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–∑–º–µ–Ω–µ–Ω–æ'

    except Customer.DoesNotExist:
        logger.error(f"–ö–ª–∏–µ–Ω—Ç {customer.id} –Ω–µ –Ω–∞–π–¥–µ–Ω –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞")
        return error_message
    except Cart.DoesNotExist:
        logger.error(f"–ö–æ—Ä–∑–∏–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞ {customer.id}")
        return error_message
    except Product.DoesNotExist:
        logger.error(f"–¢–æ–≤–∞—Ä {product_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞")
        return error_message
    except CartItem.DoesNotExist:
        logger.error(f"–≠–ª–µ–º–µ–Ω—Ç –∫–æ—Ä–∑–∏–Ω—ã –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è —Ç–æ–≤–∞—Ä–∞ {product_id}")
        return error_message
    except Exception as e:
        logger.error(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç–æ–≤–∞—Ä–∞: {e}')
        return error_message

async def new_order(customer, cart, delivery_method):
    """–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∑–∞–∫–∞–∑–∞"""
    try:
        logger.info(f"–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∑–∞–∫–∞–∑–∞ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞ {customer.id}, —Å–ø–æ—Å–æ–± –¥–æ—Å—Ç–∞–≤–∫–∏: {delivery_method}")

        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞
        order_number = await sync_to_async(order_number_generator)()
        logger.info(f"–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞: {order_number}")

        # –°–æ–∑–¥–∞–µ–º –∑–∞–∫–∞–∑
        order = await sync_to_async(Order.objects.create)(
            customer=customer,
            order_number=order_number,
            delivery_method=delivery_method,
            address=customer.address
        )

        # –ü–æ–ª—É—á–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –∫–æ—Ä–∑–∏–Ω—ã
        cart_items = await sync_to_async(list)(CartItem.objects.filter(cart=cart).select_related('product'))

        # –°–æ–∑–¥–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –∑–∞–∫–∞–∑–∞
        for item in cart_items:
            await sync_to_async(OrderItem.objects.create)(
                order=order,
                product=item.product,
                quantity=item.quantity,
            )

        logger.info(f"–ó–∞–∫–∞–∑ {order_number} —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω, —Ç–æ–≤–∞—Ä–æ–≤: {len(cart_items)}")
        return (f'‚úÖ –ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω.\n'
                f'üì¶ –ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞: {order.order_number}\n'
                f'üè† –ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏: {customer.address}\n'
                f'üöö –°–ø–æ—Å–æ–± –¥–æ—Å—Ç–∞–≤–∫–∏: {order.get_delivery_method_display()}')

    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–∫–∞–∑–∞: {e}")
        return '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–∫–∞–∑–∞'
