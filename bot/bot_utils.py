from asgiref.sync import sync_to_async
from bot.models import Customer, Product, CartItem, Cart, OrderItem, Order, Manager
from bot.services import order_number_generator


async def get_welcome_text(user) -> str:
    try:
        customer = await sync_to_async(Customer.objects.get)(telegram_id=str(user.id))
        welcome_text = f"""–° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º, {customer.first_name}!
‚úÖ –í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ –∫–∞–∫ –∑–∞–∫–∞–∑—á–∏–∫.
üìû –¢–µ–ª–µ—Ñ–æ–Ω: {customer.phone}
üè† –ê–¥—Ä–µ—Å: {customer.address}
–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é ‚Üì
"""

    except Customer.DoesNotExist:
        try:
            manager = await sync_to_async(Manager.objects.get)(telegram_id=str(user.id))
            welcome_text = '–î–ª—è –≤—Ö–æ–¥–∞ –≤ –ø–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /admin'
        except Manager.DoesNotExist:
            welcome_text = """
    üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! 
    –Ø –±–æ—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞–º–∏. –î–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –º–Ω–µ –Ω—É–∂–Ω–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è.
    üìù –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:
    +79991234567
                        """
    return welcome_text

async def update_phone(user, phone) -> str:
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–Ω—è—Ç –ª–∏ —Ç–µ–ª–µ—Ñ–æ–Ω –¥—Ä—É–≥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
        phone_exists = await sync_to_async(
            lambda: Customer.objects.filter(phone=phone).exclude(telegram_id=str(user.id)).exists()
        )()

        if phone_exists:
            return "‚ùå –≠—Ç–æ—Ç –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —É–∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥—Ä—É–≥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º."

        # –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –ø–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        customer, created = await sync_to_async(
            lambda: Customer.objects.get_or_create(
                telegram_id=str(user.id),
                defaults={
                    'first_name': user.first_name or '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ',
                    'last_name': user.last_name or '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ',
                    'phone': phone,
                    'address': '–ù–µ —É–∫–∞–∑–∞–Ω'
                }
            )
        )()

        if not created:
            # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–ª–µ—Ñ–æ–Ω –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            customer.phone = phone
            await sync_to_async(customer.save)()

        return f"""
‚úÖ –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {phone}

–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –∞–¥—Ä–µ—Å:
(–≥–æ—Ä–æ–¥, —É–ª–∏—Ü–∞, –¥–æ–º, –∫–≤–∞—Ä—Ç–∏—Ä–∞)
        """

    except Exception as e:
        print('–û—à–∏–±–∫–∞:', e)
        return "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."


async def update_address(user, address) -> str:
    try:
        customer = await sync_to_async(Customer.objects.get)(telegram_id=str(user.id))
        customer.address = address
        await sync_to_async(customer.save)()
        success_text = f"""
–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!
üìã –í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ:
üë§ –ò–º—è: {customer.first_name} {customer.last_name}
üìû –¢–µ–ª–µ—Ñ–æ–Ω: {customer.phone}
üè† –ê–¥—Ä–µ—Å: {customer.address}
–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞–≤–∞—Ç—å –∑–∞–∫–∞–∑—ã!
                    """
        return success_text
    except Customer.DoesNotExist:
        return ("‚ùå –°–Ω–∞—á–∞–ª–∞ –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞.")
    except Exception as e:
        return ("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∞–¥—Ä–µ—Å–∞.")

async def get_profile(customer):
    profile_info = f"""
üìã *–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å –∑–∞–∫–∞–∑—á–∏–∫–∞:*
üë§ –ò–º—è: {customer.first_name} {customer.last_name}
üìû –¢–µ–ª–µ—Ñ–æ–Ω: `{customer.phone}`
üè† –ê–¥—Ä–µ—Å: {customer.address}
üÜî Telegram ID: `{customer.telegram_id}`
"""
    return profile_info

async def add_item_in_cart(cart, product_id):
    product = await sync_to_async(Product.objects.get)(id=product_id)

    cart_item_exists = await sync_to_async(
        lambda: CartItem.objects.filter(cart=cart, product=product).exists()
    )()

    if cart_item_exists:
        cart_item = await sync_to_async(
            CartItem.objects.get
        )(cart=cart, product=product)
        cart_item.quantity += 1
        await sync_to_async(cart_item.save)()
        message = f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∞ –µ—â–µ 1 —à—Ç. —Ç–æ–≤–∞—Ä–∞ \"{product.title}\""
    else:
        await sync_to_async(
            CartItem.objects.create
        )(cart=cart, product=product, quantity=1)
        message = f"‚úÖ –¢–æ–≤–∞—Ä \"{product.title}\" –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É"

    return message

async def get_cart_data(customer) -> str:
    cart = await sync_to_async(Cart.objects.get)(customer=customer)
    cart_data = await sync_to_async(
        lambda: list(cart.items.select_related('product').values(
            'product__id', 'product__title', 'product__price', 'quantity'
        ))
    )()
    total_items = await sync_to_async(lambda: cart.total_items)()
    total_price = await sync_to_async(lambda: cart.total_price)()

    return cart_data, total_items, total_price


async def remove_item(customer, product_id):
    error_message = '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞ –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã'
    try:
        cart = await sync_to_async(Cart.objects.get)(customer=customer)
        product = await sync_to_async(Product.objects.get)(id=product_id)
        cart_item = await sync_to_async(CartItem.objects.get)(cart=cart, product=product)
        await sync_to_async(cart_item.delete)()
        return '‚úÖ –¢–æ–≤–∞—Ä —É–¥–∞–ª–µ–Ω –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã'

    except Customer.DoesNotExist:
        return error_message
    except Cart.DoesNotExist:
        return error_message
    except Product.DoesNotExist:
        return error_message
    except CartItem.DoesNotExist:
        return error_message
    except Exception as e:
        print(f'–û—à–∏–±–∫–∞: {e}')
        return error_message

async def change_cart_item_quantity(customer, product_id, quantity):
    error_message = '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç–æ–≤–∞—Ä–∞ –≤ –∫–æ—Ä–∑–∏–Ω–µ'
    try:
        cart = await sync_to_async(Cart.objects.get)(customer=customer)
        product = await sync_to_async(Product.objects.get)(id=product_id)
        cart_item = await sync_to_async(CartItem.objects.get)(cart=cart, product=product)
        cart_item.quantity = quantity
        await sync_to_async(cart_item.save)()
        return '‚úÖ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–∑–º–µ–Ω–µ–Ω–æ'

    except Customer.DoesNotExist:
        return error_message
    except Cart.DoesNotExist:
        return error_message
    except Product.DoesNotExist:
        return error_message
    except CartItem.DoesNotExist:
        return error_message
    except Exception as e:
        print(f'–û—à–∏–±–∫–∞: {e}')
        return error_message


async def new_order(customer, cart, delivery_method):
    try:
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞
        order_number = await sync_to_async(order_number_generator)()

        # –°–æ–∑–¥–∞–µ–º –∑–∞–∫–∞–∑
        order = await sync_to_async(Order.objects.create)(
            customer=customer,
            order_number=order_number,
            delivery_method=delivery_method
        )

        # –ü–æ–ª—É—á–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –∫–æ—Ä–∑–∏–Ω—ã
        cart_items = await sync_to_async(list)(CartItem.objects.filter(cart=cart).select_related('product'))

        # –°–æ–∑–¥–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –∑–∞–∫–∞–∑–∞
        for item in cart_items:
            await sync_to_async(OrderItem.objects.create)(
                order=order,
                product=item.product,
                quantity=item.quantity,
            )


        return (f'‚úÖ –ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω.\n'
                f'üì¶ –ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞: {order.order_number}\n'
                f'üè† –ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏: {customer.address}\n'
                f'üöö –°–ø–æ—Å–æ–± –¥–æ—Å—Ç–∞–≤–∫–∏: {order.get_delivery_method_display()}')

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–∫–∞–∑–∞: {e}")
        return '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–∫–∞–∑–∞'


@sync_to_async
def is_manager(user_id):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º"""
    try:
        manager = Manager.objects.get(phone=user_id)  # –∏–ª–∏ telegram_id, –µ—Å–ª–∏ –¥–æ–±–∞–≤–∏—Ç–µ –ø–æ–ª–µ
        return manager.is_staff
    except Manager.DoesNotExist:
        return False

@sync_to_async
def get_manager(user_id):
    """–ü–æ–ª—É—á–∞–µ—Ç –æ–±—ä–µ–∫—Ç –º–µ–Ω–µ–¥–∂–µ—Ä–∞"""
    try:
        return Manager.objects.get(phone=user_id)
    except Manager.DoesNotExist:
        return None